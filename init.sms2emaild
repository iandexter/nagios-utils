### BEGIN INIT INFO
# Provides:          sms2emaild
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: init script for sms2email daemon
### END INIT INFO

# Filename:         sms2emaild2
# Author:           r19
# HeadURL:          $HeadURL: https://svn.asiandevbank.org/ccau-unix/projects/nagios-mail/trunk/init.sms2emaild $
# Last revised by:  $Author: im4 $
# Last commit:      $Revision: 5508 $
# Last commit date: $Date: 2014-01-09 12:27:49 +0800 (Thu, 09 Jan 2014) $
# Description:      Init script for sms2email daemon
# Revision history: 04 Feb 2013 - Initial Release

# Using the lsb functions to perform the operations.
. /lib/lsb/init-functions
# Process name ( For display )
NAME=sms2emaild
# Daemon name, where is the actual executable
DAEMON=/usr/local/bin/sms2emaild
# pid file for the daemon
PIDFILE=/var/run/sms2emaild.pid

# If the daemon is not there, then exit.
test -x $DAEMON || exit 5

case $1 in
 start)
  # Checked the PID file exists and check the actual status of process
  if [ -e $PIDFILE ]; then
   pidofproc -p $PIDFILE $DAEMON "$NAME process" && status="0" || status="$?"
   # If the status is SUCCESS then don't need to start again.
   if [ $status = "0" ]; then
    printf "Process $NAME already running"
    exit # Exit
   fi
  fi
  # Start the daemon.
  printf "Starting the process $NAME "
  # Start the daemon with the help of start-stop-daemon
  # Log the message appropriately
  start_daemon -p $PIDFILE $DAEMON
  pidof "/usr/bin/perl" > $PIDFILE
  if [ $? -eq 0 ] ; then
   log_success_msg " ..."
  else
  log_failure_msg " ..."
  echo "Cannot start $DAEMON"
  fi
  ;;
 stop)
  # Stop the daemon.
  if [ -e $PIDFILE ]; then
   killproc -p $PIDFILE $DAEMON SIGTERM SIGKILL && status="0" || status="$?"
   if [ "$status" = 0 ]; then
    log_success_msg "Stopping $NAME"
    /bin/rm -rf $PIDFILE
   fi
  else
   log_failure_msg "$NAME process is not running"
  fi
  ;;
 restart)
  # Restart the daemon.
  $0 stop && sleep 2 && $0 start
  ;;
 status)
  # Check the status of the process.
  pidofproc -p $PIDFILE $DAEMON "$NAME process" > /dev/null && status="0" || status="$?"
  if [ "$status" = 0 ]; then
    log_success_msg "$NAME is running"
  else
   log_failure_msg "$NAME process is not running"
  fi
  ;;
 reload)
  # Reload the process. Basically sending some signal to a daemon to reload
  # it configurations.
  if [ -e $PIDFILE ]; then
   pidofproc -p $PIDFILE $DAEMON "$NAME process" && status="0" || status="$?"
   log_success_msg "$NAME process reloaded successfully"
  else
   log_failure_msg "$PIDFILE does not exists"
  fi
  ;;
 *)
  # For invalid arguments, print the usage message.
  echo "Usage: $0 {start|stop|restart|reload|status}"
  exit 2
  ;;
esac
